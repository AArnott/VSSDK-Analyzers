steps:
- task: MicroBuildCleanup@1
  condition: and(succeededOrFailed(), ne(variables['Hosted'], 'true'))
  displayName: MicroBuild Cleanup

- task: NuGetCommand@2
  inputs:
    command: push
    searchPatternPush: '$(Build.SourcesDirectory)\bin\**\$(BuildConfiguration)\**\*.nupkg;!**\*.symbols.nupkg;!**/VS.*.nupkg'
    publishVstsFeed: $(feedGuid)
    allowPackageConflicts: true
  displayName: Push packages to VSTS feed
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@1
  inputs:
    SourceFolder: bin
    Contents: |
      Microsoft.VisualStudio.SDK.Analyzers.CodeFixes/$(BuildConfiguration)/**/Microsoft.VisualStudio.SDK.Analyzers.dll
      Microsoft.VisualStudio.SDK.Analyzers.CodeFixes/$(BuildConfiguration)/**/Microsoft.VisualStudio.SDK.Analyzers.pdb
      Microsoft.VisualStudio.SDK.Analyzers.CodeFixes/$(BuildConfiguration)/**/Microsoft.VisualStudio.SDK.Analyzers.CodeFixes.dll
      Microsoft.VisualStudio.SDK.Analyzers.CodeFixes/$(BuildConfiguration)/**/Microsoft.VisualStudio.SDK.Analyzers.CodeFixes.pdb
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Collecting symbols artifacts

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/symbols
    ArtifactName: symbols
    ArtifactType: Container
  displayName: Publish symbols as Azure DevOps artifacts
  condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))
